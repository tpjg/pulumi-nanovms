// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A NanoVMs package image resource for building unikernel images from packages
 */
export class PackageImage extends pulumi.CustomResource {
    /**
     * Get an existing PackageImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PackageImage {
        return new PackageImage(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pulumi-nanovms:index:PackageImage';

    /**
     * Returns true if the given object is an instance of PackageImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackageImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackageImage.__pulumiType;
    }

    /**
     * The target architecture of the built image
     */
    declare public readonly architecture: pulumi.Output<string>;
    /**
     * The configuration of the built image as a JSON encoded string
     */
    declare public readonly config: pulumi.Output<string>;
    /**
     * The name of the built image
     */
    declare public /*out*/ readonly imageName: pulumi.Output<string>;
    /**
     * The path to the built image
     */
    declare public /*out*/ readonly imagePath: pulumi.Output<string>;
    /**
     * The name of the package used
     */
    declare public readonly packageName: pulumi.Output<string>;
    /**
     * The cloud provider of the built image
     */
    declare public readonly provider: pulumi.Output<string>;
    /**
     * If the latest kernel should be used, download it if necessary
     */
    declare public readonly useLatestKernel: pulumi.Output<boolean>;

    /**
     * Create a PackageImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageImageArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.packageName === undefined && !opts.urn) {
                throw new Error("Missing required property 'packageName'");
            }
            if (args?.provider === undefined && !opts.urn) {
                throw new Error("Missing required property 'provider'");
            }
            resourceInputs["architecture"] = args?.architecture;
            resourceInputs["config"] = args?.config;
            resourceInputs["force"] = args?.force;
            resourceInputs["name"] = args?.name;
            resourceInputs["packageName"] = args?.packageName;
            resourceInputs["provider"] = args?.provider;
            resourceInputs["useLatestKernel"] = args?.useLatestKernel;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["imagePath"] = undefined /*out*/;
        } else {
            resourceInputs["architecture"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["imagePath"] = undefined /*out*/;
            resourceInputs["packageName"] = undefined /*out*/;
            resourceInputs["provider"] = undefined /*out*/;
            resourceInputs["useLatestKernel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackageImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PackageImage resource.
 */
export interface PackageImageArgs {
    /**
     * The target architecture (amd64 or arm64). If not specified, uses the current system architecture
     */
    architecture?: pulumi.Input<string>;
    /**
     * The configuration as a JSON encoded string
     */
    config?: pulumi.Input<string>;
    /**
     * If an already existing image should be deleted if it exists
     */
    force?: pulumi.Input<boolean>;
    /**
     * The name of the image
     */
    name: pulumi.Input<string>;
    /**
     * The name of the package to use (e.g., 'node_v18.7.0')
     */
    packageName: pulumi.Input<string>;
    /**
     * The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
     */
    provider: pulumi.Input<string>;
    /**
     * If the latest kernel should be used, download it if necessary
     */
    useLatestKernel?: pulumi.Input<boolean>;
}
