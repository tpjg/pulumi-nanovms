// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package puluminanovms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tpjg/pulumi-nanovms/sdk/go/pulumi-nanovms/internal"
)

// A NanoVMs package image resource for building unikernel images from packages
type PackageImage struct {
	pulumi.CustomResourceState

	// The target architecture of the built image
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// The configuration of the built image as a JSON encoded string
	Config pulumi.StringOutput `pulumi:"config"`
	// The name of the built image
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// The path to the built image
	ImagePath pulumi.StringOutput `pulumi:"imagePath"`
	// The name of the package used
	PackageName pulumi.StringOutput `pulumi:"packageName"`
	// The cloud provider of the built image
	Provider pulumi.StringOutput `pulumi:"provider"`
	// If the latest kernel should be used, download it if necessary
	UseLatestKernel pulumi.BoolOutput `pulumi:"useLatestKernel"`
}

// NewPackageImage registers a new resource with the given unique name, arguments, and options.
func NewPackageImage(ctx *pulumi.Context,
	name string, args *PackageImageArgs, opts ...pulumi.ResourceOption) (*PackageImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.PackageName == nil {
		return nil, errors.New("invalid value for required argument 'PackageName'")
	}
	if args.Provider == nil {
		return nil, errors.New("invalid value for required argument 'Provider'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PackageImage
	err := ctx.RegisterResource("nanovms:index:PackageImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPackageImage gets an existing PackageImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPackageImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PackageImageState, opts ...pulumi.ResourceOption) (*PackageImage, error) {
	var resource PackageImage
	err := ctx.ReadResource("nanovms:index:PackageImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PackageImage resources.
type packageImageState struct {
}

type PackageImageState struct {
}

func (PackageImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*packageImageState)(nil)).Elem()
}

type packageImageArgs struct {
	// The target architecture (amd64 or arm64). If not specified, uses the current system architecture
	Architecture *string `pulumi:"architecture"`
	// The configuration as a JSON encoded string
	Config *string `pulumi:"config"`
	// If an already existing image should be deleted if it exists
	Force *bool `pulumi:"force"`
	// The name of the image
	Name string `pulumi:"name"`
	// The name of the package to use (e.g., 'node_v18.7.0')
	PackageName string `pulumi:"packageName"`
	// The target cloud provider (e.g., onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do, linode, vultr)
	Provider string `pulumi:"provider"`
	// If the latest kernel should be used, download it if necessary
	UseLatestKernel *bool `pulumi:"useLatestKernel"`
}

// The set of arguments for constructing a PackageImage resource.
type PackageImageArgs struct {
	// The target architecture (amd64 or arm64). If not specified, uses the current system architecture
	Architecture pulumi.StringPtrInput
	// The configuration as a JSON encoded string
	Config pulumi.StringPtrInput
	// If an already existing image should be deleted if it exists
	Force pulumi.BoolPtrInput
	// The name of the image
	Name pulumi.StringInput
	// The name of the package to use (e.g., 'node_v18.7.0')
	PackageName pulumi.StringInput
	// The target cloud provider (e.g., onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do, linode, vultr)
	Provider pulumi.StringInput
	// If the latest kernel should be used, download it if necessary
	UseLatestKernel pulumi.BoolPtrInput
}

func (PackageImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packageImageArgs)(nil)).Elem()
}

type PackageImageInput interface {
	pulumi.Input

	ToPackageImageOutput() PackageImageOutput
	ToPackageImageOutputWithContext(ctx context.Context) PackageImageOutput
}

func (*PackageImage) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageImage)(nil)).Elem()
}

func (i *PackageImage) ToPackageImageOutput() PackageImageOutput {
	return i.ToPackageImageOutputWithContext(context.Background())
}

func (i *PackageImage) ToPackageImageOutputWithContext(ctx context.Context) PackageImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageImageOutput)
}

// PackageImageArrayInput is an input type that accepts PackageImageArray and PackageImageArrayOutput values.
// You can construct a concrete instance of `PackageImageArrayInput` via:
//
//	PackageImageArray{ PackageImageArgs{...} }
type PackageImageArrayInput interface {
	pulumi.Input

	ToPackageImageArrayOutput() PackageImageArrayOutput
	ToPackageImageArrayOutputWithContext(context.Context) PackageImageArrayOutput
}

type PackageImageArray []PackageImageInput

func (PackageImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PackageImage)(nil)).Elem()
}

func (i PackageImageArray) ToPackageImageArrayOutput() PackageImageArrayOutput {
	return i.ToPackageImageArrayOutputWithContext(context.Background())
}

func (i PackageImageArray) ToPackageImageArrayOutputWithContext(ctx context.Context) PackageImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageImageArrayOutput)
}

// PackageImageMapInput is an input type that accepts PackageImageMap and PackageImageMapOutput values.
// You can construct a concrete instance of `PackageImageMapInput` via:
//
//	PackageImageMap{ "key": PackageImageArgs{...} }
type PackageImageMapInput interface {
	pulumi.Input

	ToPackageImageMapOutput() PackageImageMapOutput
	ToPackageImageMapOutputWithContext(context.Context) PackageImageMapOutput
}

type PackageImageMap map[string]PackageImageInput

func (PackageImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PackageImage)(nil)).Elem()
}

func (i PackageImageMap) ToPackageImageMapOutput() PackageImageMapOutput {
	return i.ToPackageImageMapOutputWithContext(context.Background())
}

func (i PackageImageMap) ToPackageImageMapOutputWithContext(ctx context.Context) PackageImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageImageMapOutput)
}

type PackageImageOutput struct{ *pulumi.OutputState }

func (PackageImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PackageImage)(nil)).Elem()
}

func (o PackageImageOutput) ToPackageImageOutput() PackageImageOutput {
	return o
}

func (o PackageImageOutput) ToPackageImageOutputWithContext(ctx context.Context) PackageImageOutput {
	return o
}

// The target architecture of the built image
func (o PackageImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// The configuration of the built image as a JSON encoded string
func (o PackageImageOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The name of the built image
func (o PackageImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// The path to the built image
func (o PackageImageOutput) ImagePath() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.StringOutput { return v.ImagePath }).(pulumi.StringOutput)
}

// The name of the package used
func (o PackageImageOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.StringOutput { return v.PackageName }).(pulumi.StringOutput)
}

// The cloud provider of the built image
func (o PackageImageOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.StringOutput { return v.Provider }).(pulumi.StringOutput)
}

// If the latest kernel should be used, download it if necessary
func (o PackageImageOutput) UseLatestKernel() pulumi.BoolOutput {
	return o.ApplyT(func(v *PackageImage) pulumi.BoolOutput { return v.UseLatestKernel }).(pulumi.BoolOutput)
}

type PackageImageArrayOutput struct{ *pulumi.OutputState }

func (PackageImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PackageImage)(nil)).Elem()
}

func (o PackageImageArrayOutput) ToPackageImageArrayOutput() PackageImageArrayOutput {
	return o
}

func (o PackageImageArrayOutput) ToPackageImageArrayOutputWithContext(ctx context.Context) PackageImageArrayOutput {
	return o
}

func (o PackageImageArrayOutput) Index(i pulumi.IntInput) PackageImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PackageImage {
		return vs[0].([]*PackageImage)[vs[1].(int)]
	}).(PackageImageOutput)
}

type PackageImageMapOutput struct{ *pulumi.OutputState }

func (PackageImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PackageImage)(nil)).Elem()
}

func (o PackageImageMapOutput) ToPackageImageMapOutput() PackageImageMapOutput {
	return o
}

func (o PackageImageMapOutput) ToPackageImageMapOutputWithContext(ctx context.Context) PackageImageMapOutput {
	return o
}

func (o PackageImageMapOutput) MapIndex(k pulumi.StringInput) PackageImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PackageImage {
		return vs[0].(map[string]*PackageImage)[vs[1].(string)]
	}).(PackageImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PackageImageInput)(nil)).Elem(), &PackageImage{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageImageArrayInput)(nil)).Elem(), PackageImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageImageMapInput)(nil)).Elem(), PackageImageMap{})
	pulumi.RegisterOutputType(PackageImageOutput{})
	pulumi.RegisterOutputType(PackageImageArrayOutput{})
	pulumi.RegisterOutputType(PackageImageMapOutput{})
}
