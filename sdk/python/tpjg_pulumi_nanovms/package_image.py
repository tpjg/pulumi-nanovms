# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['PackageImageArgs', 'PackageImage']

@pulumi.input_type
class PackageImageArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 package_name: pulumi.Input[_builtins.str],
                 provider: pulumi.Input[_builtins.str],
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 use_latest_kernel: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a PackageImage resource.
        :param pulumi.Input[_builtins.str] name: The name of the image
        :param pulumi.Input[_builtins.str] package_name: The name of the package to use (e.g., 'node_v18.7.0')
        :param pulumi.Input[_builtins.str] provider: The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
        :param pulumi.Input[_builtins.str] architecture: The target architecture (amd64 or arm64). If not specified, uses the current system architecture
        :param pulumi.Input[_builtins.str] config: The configuration as a JSON encoded string
        :param pulumi.Input[_builtins.bool] force: If an already existing image should be deleted if it exists
        :param pulumi.Input[_builtins.bool] use_latest_kernel: If the latest kernel should be used, download it if necessary
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "provider", provider)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if use_latest_kernel is not None:
            pulumi.set(__self__, "use_latest_kernel", use_latest_kernel)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the image
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the package to use (e.g., 'node_v18.7.0')
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "package_name", value)

    @_builtins.property
    @pulumi.getter
    def provider(self) -> pulumi.Input[_builtins.str]:
        """
        The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The target architecture (amd64 or arm64). If not specified, uses the current system architecture
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The configuration as a JSON encoded string
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If an already existing image should be deleted if it exists
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force", value)

    @_builtins.property
    @pulumi.getter(name="useLatestKernel")
    def use_latest_kernel(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If the latest kernel should be used, download it if necessary
        """
        return pulumi.get(self, "use_latest_kernel")

    @use_latest_kernel.setter
    def use_latest_kernel(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "use_latest_kernel", value)


@pulumi.type_token("pulumi-nanovms:index:PackageImage")
class PackageImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 package_name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider: Optional[pulumi.Input[_builtins.str]] = None,
                 use_latest_kernel: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        A NanoVMs package image resource for building unikernel images from packages

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] architecture: The target architecture (amd64 or arm64). If not specified, uses the current system architecture
        :param pulumi.Input[_builtins.str] config: The configuration as a JSON encoded string
        :param pulumi.Input[_builtins.bool] force: If an already existing image should be deleted if it exists
        :param pulumi.Input[_builtins.str] name: The name of the image
        :param pulumi.Input[_builtins.str] package_name: The name of the package to use (e.g., 'node_v18.7.0')
        :param pulumi.Input[_builtins.str] provider: The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
        :param pulumi.Input[_builtins.bool] use_latest_kernel: If the latest kernel should be used, download it if necessary
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PackageImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A NanoVMs package image resource for building unikernel images from packages

        :param str resource_name: The name of the resource.
        :param PackageImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PackageImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 force: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 package_name: Optional[pulumi.Input[_builtins.str]] = None,
                 provider: Optional[pulumi.Input[_builtins.str]] = None,
                 use_latest_kernel: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PackageImageArgs.__new__(PackageImageArgs)

            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["config"] = config
            __props__.__dict__["force"] = force
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if package_name is None and not opts.urn:
                raise TypeError("Missing required property 'package_name'")
            __props__.__dict__["package_name"] = package_name
            if provider is None and not opts.urn:
                raise TypeError("Missing required property 'provider'")
            __props__.__dict__["provider"] = provider
            __props__.__dict__["use_latest_kernel"] = use_latest_kernel
            __props__.__dict__["image_name"] = None
            __props__.__dict__["image_path"] = None
        super(PackageImage, __self__).__init__(
            'pulumi-nanovms:index:PackageImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PackageImage':
        """
        Get an existing PackageImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PackageImageArgs.__new__(PackageImageArgs)

        __props__.__dict__["architecture"] = None
        __props__.__dict__["config"] = None
        __props__.__dict__["image_name"] = None
        __props__.__dict__["image_path"] = None
        __props__.__dict__["package_name"] = None
        __props__.__dict__["provider"] = None
        __props__.__dict__["use_latest_kernel"] = None
        return PackageImage(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[_builtins.str]:
        """
        The target architecture of the built image
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration of the built image as a JSON encoded string
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the built image
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> pulumi.Output[_builtins.str]:
        """
        The path to the built image
        """
        return pulumi.get(self, "image_path")

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the package used
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> pulumi.Output[_builtins.str]:
        """
        The cloud provider of the built image
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter(name="useLatestKernel")
    def use_latest_kernel(self) -> pulumi.Output[_builtins.bool]:
        """
        If the latest kernel should be used, download it if necessary
        """
        return pulumi.get(self, "use_latest_kernel")

