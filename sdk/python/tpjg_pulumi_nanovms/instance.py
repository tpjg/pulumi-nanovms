# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 config: pulumi.Input[_builtins.str],
                 provider: pulumi.Input[_builtins.str],
                 image: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[_builtins.str] config: The configuration for the instance
        :param pulumi.Input[_builtins.str] provider: The provider for the instance
        :param pulumi.Input[_builtins.str] image: The name of the image to deploy
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "provider", provider)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Input[_builtins.str]:
        """
        The configuration for the instance
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter
    def provider(self) -> pulumi.Input[_builtins.str]:
        """
        The provider for the instance
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the image to deploy
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)


@pulumi.type_token("pulumi-nanovms:index:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 provider: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        A NanoVMs resource for deploying unikernel images

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] config: The configuration for the instance
        :param pulumi.Input[_builtins.str] image: The name of the image to deploy
        :param pulumi.Input[_builtins.str] provider: The provider for the instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A NanoVMs resource for deploying unikernel images

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[_builtins.str]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 provider: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["image"] = image
            if provider is None and not opts.urn:
                raise TypeError("Missing required property 'provider'")
            __props__.__dict__["provider"] = provider
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["pid"] = None
            __props__.__dict__["private_ips"] = None
            __props__.__dict__["public_ips"] = None
            __props__.__dict__["status"] = None
        super(Instance, __self__).__init__(
            'pulumi-nanovms:index:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = InstanceArgs.__new__(InstanceArgs)

        __props__.__dict__["config"] = None
        __props__.__dict__["image"] = None
        __props__.__dict__["instance_id"] = None
        __props__.__dict__["pid"] = None
        __props__.__dict__["private_ips"] = None
        __props__.__dict__["provider"] = None
        __props__.__dict__["public_ips"] = None
        __props__.__dict__["status"] = None
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def config(self) -> pulumi.Output[_builtins.str]:
        """
        The configuration for the instance
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the image deployed
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="instanceID")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier for the instance
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def pid(self) -> pulumi.Output[_builtins.str]:
        """
        The provider instance ID
        """
        return pulumi.get(self, "pid")

    @_builtins.property
    @pulumi.getter
    def private_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The private IP addresses of the instance
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> pulumi.Output[_builtins.str]:
        """
        The provider (type) for the instance
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter
    def public_ips(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The public IP addresses of the instance
        """
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        The status of the instance
        """
        return pulumi.get(self, "status")

