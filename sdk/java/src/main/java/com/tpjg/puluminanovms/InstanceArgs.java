// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.tpjg.puluminanovms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * The configuration for the instance
     * 
     */
    @Import(name="config", required=true)
    private Output<String> config;

    /**
     * @return The configuration for the instance
     * 
     */
    public Output<String> config() {
        return this.config;
    }

    /**
     * The name of the image to deploy
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The name of the image to deploy
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The provider for the instance
     * 
     */
    @Import(name="provider", required=true)
    private Output<String> provider;

    /**
     * @return The provider for the instance
     * 
     */
    public Output<String> provider() {
        return this.provider;
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.config = $.config;
        this.image = $.image;
        this.provider = $.provider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config The configuration for the instance
         * 
         * @return builder
         * 
         */
        public Builder config(Output<String> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The configuration for the instance
         * 
         * @return builder
         * 
         */
        public Builder config(String config) {
            return config(Output.of(config));
        }

        /**
         * @param image The name of the image to deploy
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The name of the image to deploy
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param provider The provider for the instance
         * 
         * @return builder
         * 
         */
        public Builder provider(Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider The provider for the instance
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        public InstanceArgs build() {
            if ($.config == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "config");
            }
            if ($.provider == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "provider");
            }
            return $;
        }
    }

}
