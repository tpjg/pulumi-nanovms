// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.tpjg.puluminanovms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PackageImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final PackageImageArgs Empty = new PackageImageArgs();

    /**
     * The target architecture (amd64 or arm64). If not specified, uses the current system architecture
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The target architecture (amd64 or arm64). If not specified, uses the current system architecture
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * The configuration as a JSON encoded string
     * 
     */
    @Import(name="config")
    private @Nullable Output<String> config;

    /**
     * @return The configuration as a JSON encoded string
     * 
     */
    public Optional<Output<String>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * If an already existing image should be deleted if it exists
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return If an already existing image should be deleted if it exists
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * The name of the image
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the image
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the package to use (e.g., &#39;node_v18.7.0&#39;)
     * 
     */
    @Import(name="packageName", required=true)
    private Output<String> packageName;

    /**
     * @return The name of the package to use (e.g., &#39;node_v18.7.0&#39;)
     * 
     */
    public Output<String> packageName() {
        return this.packageName;
    }

    /**
     * The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
     * 
     */
    @Import(name="provider", required=true)
    private Output<String> provider;

    /**
     * @return The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
     * 
     */
    public Output<String> provider() {
        return this.provider;
    }

    /**
     * If the latest kernel should be used, download it if necessary
     * 
     */
    @Import(name="useLatestKernel")
    private @Nullable Output<Boolean> useLatestKernel;

    /**
     * @return If the latest kernel should be used, download it if necessary
     * 
     */
    public Optional<Output<Boolean>> useLatestKernel() {
        return Optional.ofNullable(this.useLatestKernel);
    }

    private PackageImageArgs() {}

    private PackageImageArgs(PackageImageArgs $) {
        this.architecture = $.architecture;
        this.config = $.config;
        this.force = $.force;
        this.name = $.name;
        this.packageName = $.packageName;
        this.provider = $.provider;
        this.useLatestKernel = $.useLatestKernel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PackageImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PackageImageArgs $;

        public Builder() {
            $ = new PackageImageArgs();
        }

        public Builder(PackageImageArgs defaults) {
            $ = new PackageImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture The target architecture (amd64 or arm64). If not specified, uses the current system architecture
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The target architecture (amd64 or arm64). If not specified, uses the current system architecture
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param config The configuration as a JSON encoded string
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<String> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The configuration as a JSON encoded string
         * 
         * @return builder
         * 
         */
        public Builder config(String config) {
            return config(Output.of(config));
        }

        /**
         * @param force If an already existing image should be deleted if it exists
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force If an already existing image should be deleted if it exists
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param name The name of the image
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the image
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param packageName The name of the package to use (e.g., &#39;node_v18.7.0&#39;)
         * 
         * @return builder
         * 
         */
        public Builder packageName(Output<String> packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param packageName The name of the package to use (e.g., &#39;node_v18.7.0&#39;)
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            return packageName(Output.of(packageName));
        }

        /**
         * @param provider The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
         * 
         * @return builder
         * 
         */
        public Builder provider(Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider The target cloud provider (onprem, gcp, aws, azure, oracle, openstack, vsphere, upcloud, do)
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param useLatestKernel If the latest kernel should be used, download it if necessary
         * 
         * @return builder
         * 
         */
        public Builder useLatestKernel(@Nullable Output<Boolean> useLatestKernel) {
            $.useLatestKernel = useLatestKernel;
            return this;
        }

        /**
         * @param useLatestKernel If the latest kernel should be used, download it if necessary
         * 
         * @return builder
         * 
         */
        public Builder useLatestKernel(Boolean useLatestKernel) {
            return useLatestKernel(Output.of(useLatestKernel));
        }

        public PackageImageArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("PackageImageArgs", "name");
            }
            if ($.packageName == null) {
                throw new MissingRequiredPropertyException("PackageImageArgs", "packageName");
            }
            if ($.provider == null) {
                throw new MissingRequiredPropertyException("PackageImageArgs", "provider");
            }
            return $;
        }
    }

}
